#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

//IPAddress    apIP(42, 42, 42, 42);  // Defining a static IP address: local & gateway
                                    // Default IP in AP mode is 192.168.4.1

/* This are the WiFi access point settings. Update them to your likin */
#define inPulse1 D7
#define inPulse2 D8
#define ledPulse A0

char heartbeat1;
char heartbeat2;


unsigned long t1,t2,t3;


const char *ssid = "AdamWifi";
const char *password = "password123";

// Define a web server at port 80 for HTTP
ESP8266WebServer server(80);

bool ledState = false;

void handleRoot() {
  bool arg;

  arg = server.arg("led") =="1";
  Serial.print("got arg =  ");
  Serial.println(arg);
  digitalWrite (D6, (arg)?LOW:HIGH);
  delay(50);
  ledState = arg;

 /* Dynamically generate the LED toggle link, based on its current state (on or off)*/
  char ledText[80];
  
  if (ledState) {
    strcpy(ledText, "LED is on. <a href=\"/?led=0\">Turn it OFF!</a>");
  }

  else {
    strcpy(ledText, "LED is OFF. <a href=\"/?led=1\">Turn it ON!</a>");
  }
 
  ledState = digitalRead(D6);

  char html[1000];
  int sec = millis() / 1000;
  int min = sec / 60;
  int hr = min / 60;

 // int brightness = analogRead(A0);
 // brightness = (int)(brightness + 5) / 10; //converting the 0-1024 value to a (approximately) percentage value

// Build an HTML page to display on the web-server root address
  snprintf ( html, 1000,

"<html>\
  <head>\
    <meta http-equiv='refresh' content='10'/>\
    <title>ESP8266 WiFi Network</title>\
    <style>\
      body { background-color: #cccccc; font-family: Arial, Helvetica, Sans-Serif; font-size: 1.5em; Color: #000000; }\
      h1 { Color: #AA0000; }\
    </style>\
  </head>\
  <body>\
    <h1>ESP8266 Wi-Fi Access Point and Web Server Demo</h1>\
    <p>Uptime: %02d:%02d:%02d</p>\
    <p>Hearbeat1: %d</p>\
    <p>Hearbeat2: %d</p>\
    <p>%s<p>\
    <p>This page refreshes every 10 seconds. Click <a href=\"javascript:window.location.reload();\">here</a> to refresh the page now.</p>\
  </body>\
</html>",

    hr, min % 60, sec % 60,heartbeat1,heartbeat2,
    ledText
  );
  server.send ( 200, "text/html", html );
  //digitalWrite ( D6, 1 );
}

void handleNotFound() {
  //digitalWrite ( D6, 0 );
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += ( server.method() == HTTP_GET ) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";

  for ( uint8_t i = 0; i < server.args(); i++ ) {
    message += " " + server.argName ( i ) + ": " + server.arg ( i ) + "\n";
  }

  server.send ( 404, "text/plain", message );
  // digitalWrite ( D6, 1 ); //turn the built in LED on pin DO of NodeMCU off
}

void setup() {
  pinMode(ledPulse,INPUT);
  pinMode(inPulse1,INPUT);
  pinMode(inPulse2,INPUT);
  
  heartbeat1=0;
  heartbeat2=0;

  
  t1=millis();
  t2=millis();
  t3=millis();

  
  pinMode ( D6, OUTPUT );
  digitalWrite ( D6, 0 );
  
  delay(1000);
  Serial.begin(115200);
  Serial.println();
  Serial.println("Configuring access point...");

  //set-up the custom IP address
//  WiFi.mode(WIFI_AP_STA);
//  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));   // subnet FF FF FF 00  
  
  /* You can remove the password parameter if you want the AP to be open. */
  WiFi.softAP(ssid, password);

  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
 
  server.on ( "/", handleRoot );
  server.on ( "/led=1", handleRoot);
  server.on ( "/led=0", handleRoot);
  server.on ( "/inline", []() {
    server.send ( 200, "text/plain", "this works as well" );
  } );
  server.onNotFound ( handleNotFound );
  
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
  switch(heartbeat1){
    case 0:
    if (digitalRead(inPulse1)==LOW)heartbeat1=0;
    if (digitalRead(inPulse1)==HIGH){t1=millis();heartbeat1=1; Serial.println("Arduino 1 is Healthy");}
    if (millis()-t1>3000){heartbeat1=2; t1=millis();}
    break;

    case 1:
    if (digitalRead(inPulse1)==LOW){t1=millis(); heartbeat1=0;Serial.println("Arduino 1 is Healthy");}
    if (digitalRead(inPulse1)==HIGH)heartbeat1=1;
    if (millis()-t1>3000){heartbeat1=2; t1=millis();}
    break;

    case 2:
    Serial.println("Arduino 1 has failed");
    if (digitalRead(inPulse1)==LOW){t1=millis(); heartbeat1=0;}
    if (digitalRead(inPulse1)==HIGH){t1=millis();heartbeat1=1;}
    break;
  }

  switch(heartbeat2){
    case 0:
    if (digitalRead(inPulse2)==LOW)heartbeat2=0;
    if (digitalRead(inPulse2)==HIGH){t2=millis();heartbeat2=1; Serial.println("Arduino 2 is Healthy");}
    if (millis()-t2>3000){heartbeat2=2; t2=millis();}
    break;

    case 1:
    if (digitalRead(inPulse2)==LOW){t2=millis(); heartbeat2=0;Serial.println("Arduino 2 is Healthy");}
    if (digitalRead(inPulse2)==HIGH)heartbeat2=1;
    if (millis()-t2>3000){heartbeat2=2; t2=millis();}
    break;

    case 2:
    Serial.println("Arduino 2 has failed");
    if (digitalRead(inPulse2)==LOW){t2=millis(); heartbeat2=0;}
    if (digitalRead(inPulse2)==HIGH){t2=millis();heartbeat2=1;}
    break;
  }

}
